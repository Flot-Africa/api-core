name: Build and Deploy
on:
  push:
    branches: [ main ]
    tags:
      - v*
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Create JWT Directory
        run: mkdir -p src/main/resources/jwt

      - name: Setup JWT Keys
        run: |
          echo "${{ secrets.JWT_PRIVATE_KEY }}" > src/main/resources/jwt/privateKey.pem
          echo "${{ secrets.JWT_PUBLIC_KEY }}" > src/main/resources/jwt/publicKey.pem
          chmod 600 src/main/resources/jwt/privateKey.pem src/main/resources/jwt/publicKey.pem

      - name: Extract branch/tag name
        shell: bash
        run: echo "version=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/*/}}" >> $GITHUB_OUTPUT
        id: extract_version

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_ORGANIZATION }}/flot-api:${{ steps.extract_version.outputs.version }}
            ${{ secrets.DOCKER_ORGANIZATION }}/flot-api:latest
      
      
      - name: Build and Push Native Images for Multiple Architectures
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          VERSION: ${{ steps.extract_version.outputs.version }}
        run: |
            # Build for amd64
            mvn clean package -Pnative -DskipTests \
             -Dquarkus.native.container-build=true \
             -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:22.3-java21 \
             -Dquarkus.native.container-runtime-options="--platform=linux/amd64" \
             -Dquarkus.container-image.build=true \
             -Dquarkus.container-image.push=true \
             -Dquarkus.container-image.registry=docker.io \
             -Dquarkus.container-image.group=${{ secrets.DOCKER_ORGANIZATION }} \
             -Dquarkus.container-image.name=flot-api \
             -Dquarkus.container-image.tags="${{ steps.extract_version.outputs.version }}-amd64"
  
            # Build for arm64
            mvn clean package -Pnative -DskipTests \
             -Dquarkus.native.container-build=true \
             -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:22.3-java21 \
             -Dquarkus.native.container-runtime-options="--platform=linux/arm64" \
             -Dquarkus.container-image.build=true \
             -Dquarkus.container-image.push=true \
             -Dquarkus.container-image.registry=docker.io \
             -Dquarkus.container-image.group=${{ secrets.DOCKER_ORGANIZATION }} \
             -Dquarkus.container-image.name=flot-api \
             -Dquarkus.container-image.tags="${{ steps.extract_version.outputs.version }}-arm64"
  
            # Create and push a multi-architecture manifest
            docker manifest create ${{ secrets.DOCKER_ORGANIZATION }}/flot-api:${{ steps.extract_version.outputs.version }} \
              ${{ secrets.DOCKER_ORGANIZATION }}/flot-api:${{ steps.extract_version.outputs.version }}-amd64 \
              ${{ secrets.DOCKER_ORGANIZATION }}/flot-api:${{ steps.extract_version.outputs.version }}-arm64
            
            docker manifest create ${{ secrets.DOCKER_ORGANIZATION }}/flot-api:latest \
              ${{ secrets.DOCKER_ORGANIZATION }}/flot-api:${{ steps.extract_version.outputs.version }}-amd64 \
              ${{ secrets.DOCKER_ORGANIZATION }}/flot-api:${{ steps.extract_version.outputs.version }}-arm64
            
            docker manifest push ${{ secrets.DOCKER_ORGANIZATION }}/flot-api:${{ steps.extract_version.outputs.version }}
            docker manifest push ${{ secrets.DOCKER_ORGANIZATION }}/flot-api:latest