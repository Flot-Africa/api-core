#####################################################################
# CONFIGURATION COMMUNE
#####################################################################

# Base Configuration
quarkus.http.root-path=/api
quarkus.resteasy-reactive.path=/v1
quarkus.default-locale=fr-FR
quarkus.datasource.jdbc=false
quarkus.swagger-ui.enable=true
quarkus.swagger-ui.always-include=true

# Base Database Configuration
quarkus.datasource.db-kind=postgresql
quarkus.hibernate-orm.packages=africa.flot.domain.model

# Logging Configuration
quarkus.log.level=INFO
quarkus.log.category."io.quarkus".level=WARN
quarkus.log.category."io.quarkus.config".level=DEBUG

# Logging vers fichier
quarkus.log.file.enable=true
quarkus.log.file.path=storage/logs/flot.log
quarkus.log.file.rotation.rotate-at=00:00:01
quarkus.log.file.rotation.suffix=.yyyy-MM-dd.log
quarkus.log.file.rotation.rotate-on-boot=true
quarkus.log.file.rotation.max-file-size=10M
quarkus.log.file.rotation.max-backup-index=5

# CORS Configuration
quarkus.http.cors=true
quarkus.http.cors.origins=/.*/
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with
quarkus.http.cors.exposed-headers=*
quarkus.http.cors.allow-credentials=true

# JWT Configuration
mp.jwt.verify.issuer=${JWT_ISSUER}
mp.jwt.verify.publickey.location=jwt/publicKey.pem
smallrye.jwt.sign.key.location=jwt/privateKey.pem

# Auth Admin Key
auth.admin.key=${AUTH_ADMIN_KEY:admin}

# Container and Native Image Configuration
quarkus.container-image.builder=docker
quarkus.container-image.registry=docker.io
quarkus.container-image.group=flot701
quarkus.container-image.name=flot-api
quarkus.container-image.tag=${VERSION:latest}
quarkus.container-image.build=true
quarkus.container-image.push=true

# Native build configuration
quarkus.native.container-build=true
quarkus.native.additional-build-args=\
    -march=x86-64,\
    --initialize-at-run-time=io.netty.channel.unix.Socket,\
    --initialize-at-run-time=io.netty.channel.unix.IovArray,\
    --initialize-at-run-time=io.netty.channel.epoll.EpollEventArray,\
    --initialize-at-run-time=io.netty.channel.epoll.Native,\
    -H:+StaticExecutableWithDynamicLibC

#####################################################################
# CONFIGURATION DEV
#####################################################################
%dev.quarkus.log.level=DEBUG
%dev.quarkus.log.category."io.quarkus.hibernate.reactive".level=DEBUG
%dev.quarkus.log.category."org.hibernate.SQL".level=DEBUG
%dev.quarkus.log.category."org.hibernate.type.descriptor.sql.BasicBinder".level=TRACE
%dev.quarkus.log.category."io.micrometer".level=DEBUG

# Base de données (dev)
%dev.quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5432/flot_api?loggerLevel=OFF
%dev.quarkus.datasource.username=quarkus
%dev.quarkus.datasource.password=quarkus
%dev.quarkus.hibernate-orm.database.generation=update
%dev.quarkus.hibernate-orm.log.sql=true

# Jetfy SMS (dev)
%dev.quarkus.jetfy.api.token=dev-jetfy-token
%dev.quarkus.jetfy.api.sender-id=dev-sender
%dev.quarkus.rest-client.jetfy-api.url=http://localhost:8090
%dev.quarkus.rest-client.jetfy-api.scope=jakarta.enterprise.context.ApplicationScoped

# Fineract (dev)
%dev.quarkus.fineract.api.url=http://localhost:8888
%dev.quarkus.fineract.api.username=dev_fineract_user
%dev.quarkus.fineract.api.password=dev_fineract_pass

#####################################################################
# CONFIGURATION PROD
#####################################################################
%prod.quarkus.http.port=${PORT:8080}

%prod.quarkus.log.level=INFO
%prod.quarkus.log.category."io.quarkus.hibernate.reactive".level=DEBUG
%prod.quarkus.log.category."org.hibernate.SQL".level=DEBUG
%prod.quarkus.log.category."org.hibernate.type.descriptor.sql.BasicBinder".level=TRACE
%prod.quarkus.log.category."io.micrometer".level=DEBUG
%prod.quarkus.log.category."org.hibernate".level=WARN

# Base de données (prod)
%prod.quarkus.datasource.username=${DB_USER}
%prod.quarkus.datasource.password=${DB_PASSWORD}
%prod.quarkus.datasource.reactive.url=vertx-reactive:postgresql://${DB_HOST:db}:${DB_PORT:5432}/${DB_NAME:flot_api}
%prod.quarkus.hibernate-orm.database.generation=update
%prod.quarkus.hibernate-orm.log.sql=false
%prod.quarkus.hibernate-orm.log.bind-parameters=false

# Jetfy SMS (prod)
%prod.quarkus.jetfy.api.token=${JETFY_API_TOKEN}
%prod.quarkus.jetfy.api.sender-id=${JETFY_API_SENDER_ID}
%prod.quarkus.rest-client.jetfy-api.url=${JETFY_API_URL:https://api.jetfy.net}
%prod.quarkus.rest-client.jetfy-api.scope=jakarta.enterprise.context.ApplicationScoped

# Fineract (prod)
%prod.quarkus.fineract.api.url=${FINERACT_API_URL}
%prod.quarkus.fineract.api.username=${FINERACT_API_USERNAME}
%prod.quarkus.fineract.api.password=${FINERACT_API_PASSWORD}
%prod.quarkus.rest-client.fineract-api.url=${FINERACT_API_URL}
%prod.quarkus.rest-client.fineract-api.username=${FINERACT_API_USERNAME}
%prod.quarkus.rest-client.fineract-api.password=${FINERACT_API_PASSWORD}
%prod.quarkus.rest-client.fineract-api.connect-timeout=30000
%prod.quarkus.rest-client.fineract-api.read-timeout=30000
%prod.quarkus.rest-client.fineract-api.max-retries=3
%prod.quarkus.rest-client.fineract-api.retry-interval=1000

# Redis Configuration
%prod.quarkus.redis.hosts=${REDIS_HOST:localhost}
%prod.quarkus.redis.database=0