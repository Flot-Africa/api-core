# Base Configuration (commune à tous les environnements)
quarkus.http.root-path=/api
quarkus.resteasy-reactive.path=/v1
quarkus.default-locale=fr-FR
quarkus.datasource.jdbc=false
quarkus.swagger-ui.enable=true
quarkus.swagger-ui.always-include=true



# Base Database Configuration
quarkus.datasource.db-kind=postgresql
quarkus.hibernate-orm.packages=africa.flot.domain.model

# Base MinIO Configuration
quarkus.minio.url=http://localhost:9000
quarkus.minio.access-key=minioadmin
quarkus.minio.secret-key=minioadmin
quarkus.minio.bucket-name=test

# Test Configuration
%test.quarkus.datasource.devservices.enabled=true
%test.quarkus.datasource.username=quarkus
%test.quarkus.datasource.password=quarkus
%test.quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5432/test_db?loggerLevel=OFF
%test.quarkus.hibernate-orm.database.generation=drop-and-create
%test.quarkus.hibernate-orm.log.sql=true

%test.quarkus.rest-client."africa.flot.infrastructure.danaya.DanayaClient".url=http://localhost:8082
%test.quarkus.rest-client.danaya-api.api-key=test-key
%test.quarkus.rest-client.danaya-api.api-secret=test-secret
%test.quarkus.rest-client.danaya-api.url=http://localhost:8082

%test.quarkus.minio.url=http://localhost:9000
%test.quarkus.minio.access-key=minioadmin
%test.quarkus.minio.secret-key=minioadmin
%test.quarkus.minio.bucket-name=test

# Dev Configuration
%dev.quarkus.datasource.devservices.enabled=true
%dev.quarkus.datasource.username=quarkus
%dev.quarkus.datasource.password=quarkus
%dev.quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5432/flot_api?loggerLevel=OFF
%dev.quarkus.hibernate-orm.database.generation=update
%dev.quarkus.hibernate-orm.log.sql=true

# Production Configuration
%prod.quarkus.http.port=${PORT:8080}
%prod.quarkus.datasource.username=${DB_USER}
%prod.quarkus.datasource.password=${DB_PASSWORD}
%prod.quarkus.datasource.reactive.url=vertx-reactive:postgresql://${DB_HOST:db}:${DB_PORT:5432}/${DB_NAME:flot_api}
%prod.quarkus.hibernate-orm.database.generation=update
%prod.quarkus.hibernate-orm.log.sql=false
%prod.quarkus.hibernate-orm.log.bind-parameters=false

%prod.quarkus.minio.url=${MINIO_URL}
%prod.quarkus.minio.access-key=${MINIO_ACCESS_KEY}
%prod.quarkus.minio.secret-key=${MINIO_SECRET_KEY}
%prod.quarkus.minio.bucket-name=${MINIO_BUCKET_NAME}

%prod.quarkus.rest-client."africa.flot.infrastructure.danaya.DanayaClient".url=${DANAYA_API_URL}
%prod.quarkus.rest-client.danaya-api.api-key=${DANAYA_API_KEY}
%prod.quarkus.rest-client.danaya-api.api-secret=${DANAYA_API_SECRET}
%prod.quarkus.rest-client.danaya-api.url=${DANAYA_API_URL}

# Metrics Configuration
quarkus.micrometer.export.prometheus.enabled=true
quarkus.micrometer.export.prometheus.path=/metrics
quarkus.micrometer.export.prometheus.port=9100
quarkus.micrometer.binder.http-client.enabled=true
quarkus.micrometer.binder.http-server.enabled=true
quarkus.micrometer.binder.jvm=true
quarkus.micrometer.binder.system=true
quarkus.micrometer.binder.vertx.enabled=true
quarkus.micrometer.binder.kafka.enabled=true
quarkus.micrometer.registry-static-labels=application=flot-api
quarkus.micrometer.export.prometheus.authentication.enabled=true
quarkus.micrometer.export.prometheus.authentication.basic-auth.username=${METRICS_USERNAME:admin}
quarkus.micrometer.export.prometheus.authentication.basic-auth.password=${METRICS_PASSWORD:changeme}

# Logging Configuration
quarkus.log.console.enable=true
quarkus.log.console.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.category."io.quarkus".level=WARN
quarkus.log.category."org.hibernate".level=WARN

# Container and Native Image Configuration
quarkus.container-image.builder=docker
quarkus.container-image.registry=docker.io
quarkus.container-image.group=flot701
quarkus.container-image.name=flot-api
quarkus.container-image.tag=${VERSION:latest}
quarkus.container-image.build=true
quarkus.container-image.push=true

mp.jwt.verify.issuer=${JWT_ISSUER}
mp.jwt.verify.publickey.location=jwt/publicKey.pem
smallrye.jwt.sign.key.location=jwt/privateKey.pem
# Native specific configuration
quarkus.native.container-build=true

# Native build configuration
quarkus.native.additional-build-args=\
    -march=x86-64,\
    --initialize-at-run-time=io.netty.channel.unix.Socket,\
    --initialize-at-run-time=io.netty.channel.unix.IovArray,\
    --initialize-at-run-time=io.netty.channel.epoll.EpollEventArray,\
    --initialize-at-run-time=io.netty.channel.epoll.Native,\
    -H:+StaticExecutableWithDynamicLibC

# Configuration Redis
%prod.quarkus.redis.hosts=${REDIS_HOST:localhost}
%prod.quarkus.redis.database=0


# Configuration Jetfy API
%prod.quarkus.jetfy.api.token=${JETFY_API_TOKEN}
%prod.quarkus.jetfy.api.sender-id=${JETFY_SENDER_ID:FLOT}

# REST Client configuration
quarkus.rest-client.jetfy-api.url=https://api.jetfy.net
quarkus.rest-client.jetfy-api.scope=jakarta.enterprise.context.ApplicationScoped

quarkus.http.cors=true
quarkus.http.cors.origins=/.*/
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with
quarkus.http.cors.exposed-headers=*
quarkus.http.cors.allow-credentials=true


